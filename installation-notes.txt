# Requires bash

# Create a zchecker working directory, with your name of choice:
mkdir zchecker
cd zchecker

# Get a copy of this repository:
wget https://github.com/mkelley/zchecker-support/archive/master.zip
unzip master.zip
mv zchecker-support-master/{*.sh,*.py,*.env,*.txt,Pipfile*} .
rm -rf master.zip zchecker-support-master

# Create a virtual environment for zchecker:
python3 -m venv .venv --prompt=zchecker
source .venv/bin/activate
pip install --upgrade pip setuptools
pip install pipenv
pipenv install

# Create zchecker data directories.  They can be anywhere, but note
# their location for zchecker.env and zchecker.config, below.
# Assuming they are in the zchecker working directory:
mkdir cutouts
mkdir stacks

# Get zbrowser:
git clone https://github.com/mkelley/zbrowser.git

# follow instructions in zbrowser/README.md

# Back to the zchecker working directory, edit, move, and source
# zchecker.env
edit zchecker.env
mv zchecker.env ${VIRTUAL_ENV}/bin/
source zchecker.env

# Create a zchecker configuration file in your .config directory:
cat >~/.config/zchecker.config<<EOF
{
  "database": "/path/to/zchecker.db",
  "log": "/path/to/zchecker.log",
  "user": "IRSA account user name",
  "password": "IRSA account password",
  "cutout path": "/path/to/cutouts",
  "cutout size": "5arcmin",
  "stack path": "/path/to/stacks"
}
EOF
chmod 600 ~/.config/zchecker.config
# Edit that file.  You'll likely want to replace /path/to with the
# the zchecker working directory (same as ZDIR in zchecker.env).

# make a src directory
cd $ZDIR
mkdir src

# zchecker requires a recent version of sqlite, at least 3.22.  If an
# upgrade is necessary:
cd $ZDIR/src
wget https://sqlite.org/2019/sqlite-autoconf-3300100.tar.gz
tar xzvf sqlite-autoconf-3300100.tar.gz
cd sqlite-autoconf-3300100
./configure --prefix=$VIRTUAL_ENV
make
make install

# Install Montage, e.g.:
cd $ZDIR/src
wget https://github.com/Caltech-IPAC/Montage/archive/master.zip
unzip master.zip
cd Montage-master/
make
cp -r bin $ZDIR/.venv/
cp -r lib $ZDIR/.venv/

## install oorb
## TBD

# Test out zchecker.
#
# Command summary:
#   * ztf-update: download the ZTF pointing information for 2019 Nov 05
#   * eph: download ephemerides for comet 29P over the month of Nov 2019
#   * search: search for 29P in all observations in database, there
#     should be 1 observation found
#   * download-cutouts: download a cutout image around the of all found
#     targets
#   * zproject: resample all downloaded images, center on the target and
#     rotate to place the Sun direction to the right
#   * zstack: make nightly stacks of all found targets, by filter
#   * zphot measure: measure aperture photometry at each found target
#   * zphot dump: print photometry of 29P to the console
#
# The first time zchecker is run, there will be several errors about
# the database, but they should be automatically corrected.
#
export MPLBACKEND
cd $ZDIR
zchecker ztf-update --date=2019-11-05
zchecker eph 29P --start=2019-11-01 --end=2019-11-30
zchecker search 29P --full
zchecker download-cutouts
zproject
zstack
zphot measure
zphot dump 29P


# Test out zbrowser.
#
# Command summary:
#   * regenerate-zbrowserdb: creates the database file used for the web
#     pages
#   * pointing: makes all-sky plots of ZTF pointings and zchecker
#     targets
#   * stack2web: generates the quick-look images for the web pages
#
regenerate-zbrowserdb.sh
python3 ${ZBROWSER_SCRIPTS}/pointing.py ${ZWEB}/img/pointing --frame=equatorial --date=2019-11-05
python3 ${ZBROWSER_SCRIPTS}/pointing.py ${ZWEB}/img/pointing --frame=ecliptic --date=2019-11-05
python3 ${ZBROWSER_SCRIPTS}/pointing.py ${ZWEB}/img/pointing --frame=galactic --date=2019-11-05
python3 ${ZBROWSER_SCRIPTS}/stack2web.py ${ZWEB}/img/stacks --date=2019-11-05

# Open a web browser and navigate to the served zbrowser directory.
# There should be a summary for 2019 Nov 05, with the 29P detection.

# Optional: setup Slack integration.
#   * open https://api.slack.com/apps
#   * create a Slack App connected to ZTF Solar System workspace
#   * Activate Incoming Webhooks -> New Webhook to #auto-reports channel
#   * copy webhook URL to zchecker.env (now in .venv/bin) SLACK_ZTFSSWG_POST_URL
#   * Activate Incoming Webhooks -> New Webhook to direct message yourself
#   * copy webhook URL to zchecker.env (now in .venv/bin) SLACK_USER_POST_URL
#
# Test it out:
source zchecker.env
# print to the console:
slack-zchecker-daily.py -n
# send direct message to yourself:
slack-zchecker-daily.py --user
# send message to #auto-reports channel
slack-zchecker-daily.py

# If the slack app is working, then add it to the end of
# zchecker-daily-search.sh.  Be sure to include the "&& \" string at
# the end of the previous command so that the script is only run if
# the previous lines were successful.

# Test zchecker-daily-search
zchecker-daily-search.sh
